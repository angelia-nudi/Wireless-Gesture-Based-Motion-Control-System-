/*
 *  ======== pwmled2.c ========
 */
/* For usleep() */
#include <unistd.h>
#include <stddef.h>

/* Driver Header files */
#include <ti/drivers/PWM.h>

/* Driver configuration */
#include "ti_drivers_config.h"
#include <ti/drivers/GPIO.h>
/*
 *  ======== mainThread ========
 *  Task periodically increments the PWM duty for the on board LED.
 */
//void *mainThread(void *arg0)
//{
//    /* Period and duty in microseconds */
//    uint16_t pwmPeriod = 3000;
//    uint16_t duty      = 0;
//    uint16_t dutyInc   = 100;
//
//    /* Sleep time in microseconds */
//    uint32_t time   = 50000;
//    PWM_Handle pwm1 = NULL;
//    PWM_Handle pwm2 = NULL;
//    PWM_Params params;
//
//    /* Call driver init functions. */
//    PWM_init();
//
//    PWM_Params_init(&params);
//    params.dutyUnits   = PWM_DUTY_US;
//    params.dutyValue   = 0;
//    params.periodUnits = PWM_PERIOD_US;
//    params.periodValue = pwmPeriod;
//    pwm1               = PWM_open(CONFIG_PWM_0, &params);
//    if (pwm1 == NULL)
//    {
//        /* CONFIG_PWM_0 did not open */
//        while (1) {}
//    }
//
//    PWM_start(pwm1);
//
//    pwm2 = PWM_open(CONFIG_PWM_1, &params);
//    if (pwm2 == NULL)
//    {
//        /* CONFIG_PWM_0 did not open */
//        while (1) {}
//    }
//
//    PWM_start(pwm2);
//
//    /* Loop forever incrementing the PWM duty */
//    while (1)
//    {
//        PWM_setDuty(pwm1, duty);
//
//        PWM_setDuty(pwm2, duty);
//
//        duty = (duty + dutyInc);
//
//        if (duty == pwmPeriod || (!duty))
//        {
//            dutyInc = -dutyInc;
//        }
//
//        usleep(time);
//    }
//}

 void *mainThread(void *arg0)
 {
     uint16_t pwmPeriod = 30; // 3 ms = 333 Hz
     uint16_t duty      = 15; // 50% duty
     PWM_Handle pwm1    = NULL;
     PWM_Handle pwm2    = NULL;
     PWM_Params params;
     float position = 360.0;
     float stepAngle = 0.05625; // 1/32 mode
//     float stepAngle =1.8; // full step mode



     // <-- Float variable for delay time in milliseconds
     PWM_init();
     PWM_Params_init(&params);
     GPIO_init();

     GPIO_setConfig(CONFIG_GPIO_DIR, GPIO_CFG_OUTPUT);


     params.dutyUnits   = PWM_DUTY_US;
     params.dutyValue   = duty;
     params.periodUnits = PWM_PERIOD_US;
     params.periodValue = pwmPeriod;

     pwm1 = PWM_open(CONFIG_PWM_0, &params);
     if (pwm1 == NULL) while (1) {}

     pwm2 = PWM_open(CONFIG_PWM_1, &params);
     if (pwm2 == NULL) while (1) {}

//     PWM_start(pwm1);


     for (int i = 0; i < 5; i++) {
        float delayTimeus = (position / stepAngle) * pwmPeriod;
        if (position < 0) {
                GPIO_write(CONFIG_GPIO_DIR, 1); // Reverse direction
                delayTimeus =(position / stepAngle) * pwmPeriod * -1;
            } else {
                GPIO_write(CONFIG_GPIO_DIR, 0); // Forward direction
            }

        position += 10.0;
        PWM_start(pwm1);
        int delayTimeuss = (int)(delayTimeus);
        usleep((useconds_t)(delayTimeuss)); // Convert float ms to microseconds
        PWM_stop(pwm1);
        sleep(5); // Wait 5 seconds
     }
 }
