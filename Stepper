/*
 *  ======== pwmled2.c ========
 */
/* For usleep() */
#include <unistd.h>
#include <stddef.h>

/* Driver Header files */
#include <ti/drivers/PWM.h>

/* Driver configuration */
#include "ti_drivers_config.h"
#include <ti/drivers/GPIO.h>
/*
 *  ======== mainThread ========
 *  Task periodically increments the PWM duty for the on board LED.
 */
//void *mainThread(void *arg0)
//{
//    /* Period and duty in microseconds */
//    uint16_t pwmPeriod = 3000;
//    uint16_t duty      = 0;
//    uint16_t dutyInc   = 100;
//
//    /* Sleep time in microseconds */
//    uint32_t time   = 50000;
//    PWM_Handle pwm1 = NULL;
//    PWM_Handle pwm2 = NULL;
//    PWM_Params params;
//
//    /* Call driver init functions. */
//    PWM_init();
//
//    PWM_Params_init(&params);
//    params.dutyUnits   = PWM_DUTY_US;
//    params.dutyValue   = 0;
//    params.periodUnits = PWM_PERIOD_US;
//    params.periodValue = pwmPeriod;
//    pwm1               = PWM_open(CONFIG_PWM_0, &params);
//    if (pwm1 == NULL)
//    {
//        /* CONFIG_PWM_0 did not open */
//        while (1) {}
//    }
//
//    PWM_start(pwm1);
//
//    pwm2 = PWM_open(CONFIG_PWM_1, &params);
//    if (pwm2 == NULL)
//    {
//        /* CONFIG_PWM_0 did not open */
//        while (1) {}
//    }
//
//    PWM_start(pwm2);
//
//    /* Loop forever incrementing the PWM duty */
//    while (1)
//    {
//        PWM_setDuty(pwm1, duty);
//
//        PWM_setDuty(pwm2, duty);
//
//        duty = (duty + dutyInc);
//
//        if (duty == pwmPeriod || (!duty))
//        {
//            dutyInc = -dutyInc;
//        }
//
//        usleep(time);
//    }
//}

//
//
//void *mainThread(void *arg0)
//{
//    uint16_t pwmPeriod = 3000; // 3 ms = 333 Hz
//    uint16_t duty      = 1500; // 50% duty
//    PWM_Handle pwm1    = NULL;
//    PWM_Handle pwm2    = NULL;
//    PWM_Params params;
//    uint16_t cycleCount = 0;
//    uint16_t maxCycles = 200;
//    PWM_init();
//    PWM_Params_init(&params);
//    GPIO_init();
//    /* Configure DIR pin as output */
//    GPIO_setConfig(CONFIG_GPIO_DIR, GPIO_CFG_OUTPUT);
//    GPIO_write(CONFIG_GPIO_DIR, 1); // Set initial direction
//    params.dutyUnits   = PWM_DUTY_US;
//    params.dutyValue   = duty;
//    params.periodUnits = PWM_PERIOD_US;
//    params.periodValue = pwmPeriod;
//
//    pwm1 = PWM_open(CONFIG_PWM_0, &params);
//    if (pwm1 == NULL) while (1) {}
//
//    pwm2 = PWM_open(CONFIG_PWM_1, &params);
//    if (pwm2 == NULL) while (1) {}
//
//    PWM_start(pwm1);
//    PWM_start(pwm2);
//    while (1) {
//        usleep(30000); // Wait for one PWM cycle
//        PWM_stop(pwm1);
//        break; // Exit the loop
//    }
//
//
//    while (1) {
//        sleep(1); // Keep the thread alive
//    }
//}


 void *mainThread(void *arg0)
 {
     uint16_t pwmPeriod = 3000; // 3 ms = 333 Hz
     uint16_t duty      = 1500; // 50% duty
     PWM_Handle pwm1    = NULL;
     PWM_Handle pwm2    = NULL;
     PWM_Params params;
     float position1 = 20.0;
     float stepAngle1 = 1.8;

     float timePerStepMs = 3000;
     float stepsNeeded1 = position1 / stepAngle1;
     float delayTimeMs1 = stepsNeeded1 * timePerStepMs;
     float position2 = 30.0;
     float stepAngle2 = 1.8;
     float timePerStepMs2 = 3000;
     float stepsNeeded2 = position2 / stepAngle2;
     float delayTimeMs2 = stepsNeeded2 * timePerStepMs;

     // <-- Float variable for delay time in milliseconds
     PWM_init();
     PWM_Params_init(&params);
     GPIO_init();

     GPIO_setConfig(CONFIG_GPIO_DIR, GPIO_CFG_OUTPUT);
     GPIO_write(CONFIG_GPIO_DIR, 1);

     params.dutyUnits   = PWM_DUTY_US;
     params.dutyValue   = duty;
     params.periodUnits = PWM_PERIOD_US;
     params.periodValue = pwmPeriod;

     pwm1 = PWM_open(CONFIG_PWM_0, &params);
     if (pwm1 == NULL) while (1) {}

     pwm2 = PWM_open(CONFIG_PWM_1, &params);
     if (pwm2 == NULL) while (1) {}

     PWM_start(pwm1);
     PWM_start(pwm2);

     while (1) {
         usleep((useconds_t)(delayTimeMs1)); // Convert float ms to microseconds
         PWM_stop(pwm1);
         break;
     }
     while (1) {
              usleep((useconds_t)(delayTimeMs2)); // Convert float ms to microseconds
              PWM_stop(pwm2);
              break;
          }
     while (1) {
         sleep(1);
     }
 }
 
